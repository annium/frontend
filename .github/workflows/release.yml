name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.check.outputs.run_ci }}
    steps:
      - name: Check if CI should run
        id: check
        run: echo "run_ci=${{ !contains(github.event.head_commit.message, 'skip ci') }}" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup
        run: make setup

      - name: Get latest tag version
        id: get_version
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $TAG"
          VERSION=${TAG#v}  # remove "v"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Build
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: make build buildNumber=${{ steps.get_version.outputs.patch }}

      - name: Pack
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: make pack buildNumber=${{ steps.get_version.outputs.patch }}

      - name: Build Documentation
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: make docs-build

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        uses: actions/deploy-pages@v4

      - name: Publish NuGet packages
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: make publish apiKey=${{ secrets.NUGET_API_KEY }}

      - name: Create Git tag
        if: ${{ needs.init.outputs.run_ci == 'true' }}
        run: |
          git config user.name "it"
          git config user.email "it@annium.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git tag v${{ steps.get_version.outputs.new_version }}
          git push origin v${{ steps.get_version.outputs.new_version }}